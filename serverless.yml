service: snbot

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 256
  variables: ${file(secret-${self:provider.stage}.yml)}
  deploymentBucket: snbot-sls-deploy
  timeout: 60 # 60 seconds
  environment:
    NODE_ENV: ${self:provider.variables.NODE_ENV}
    FB_PAGE_TOKEN: ${self:provider.variables.FB_PAGE_TOKEN}
    FB_VERIFY_TOKEN: ${self:provider.variables.FB_VERIFY_TOKEN}
    FB_USERNAME: ${self:provider.variables.FB_USERNAME}
    TVDB_API_KEY: ${self:provider.variables.TVDB_API_KEY}
    TRAKT_API_KEY: ${self:provider.variables.TRAKT_API_KEY}
    WITAI_TOKEN: ${self:provider.variables.WITAI_TOKEN}
    FAN_ART_API_KEY: ${self:provider.variables.FAN_ART_API_KEY}
    THE_MOVIE_DB_API_KEY: ${self:provider.variables.THE_MOVIE_DB_API_KEY}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource:
        Fn::Join:
          - ":"
          - - "arn:aws:lambda"
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - "function"
            - "${self:service}-${self:provider.stage}-*"
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::Join:
          - ":"
          - - "arn:aws:dynamodb"
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - "table/*"

# you can add packaging information here
package:
  individually: true
  exclude:
    - "*/**"

functions:
  messengerEntryPoint:
    handler: build/messengerEntryFunction.handler
    description: The main entry point for FB Messenger, whatever a user sends to the Messenger, it is forwarded here by the Messenger Platform
    package:
      include:
        - build/messengerEntryFunction.js
    events:
      - http:
          path: webhook
          method: get
      - http:
          path: webhook
          method: post

  messengerReply:
    handler: build/messengerReplyFunction.handler
    description: Whenver the bot wants to reply something, this function converts it into messenger friendly format and sends
    package:
      include:
        - build/messengerReplyFunction.js

  processQuery:
    handler: build/processQueryFunction.handler
    description: The actual brain of the Series Notifier bot
    package:
      include:
        - build/processQueryFunction.js
  
  notificationCron:
    handler: build/dispatch-notif.main
    description: A cron that sends notifications to users when an episode is live
    package:
      include:
        - build/dispatch-notif.js
    events:
      - schedule:
          name: series-notifier-dispatch-notif-cron-${self:provider.stage}
          description: A cron that sends notifications to users when an episode is live
          rate: rate(15 minutes)
